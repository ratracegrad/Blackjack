// Generated by CoffeeScript 1.9.0
(function() {
  var __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __hasProp = {}.hasOwnProperty;

  window.AppView = (function(_super) {
    __extends(AppView, _super);

    function AppView() {
      return AppView.__super__.constructor.apply(this, arguments);
    }

    AppView.prototype.template = _.template("<div class='container'> <h1>Black Jack</h1> <center> <div class='buttons'> <button class='hit-button btn btn-primary'>Hit</button> <button class='stand-button btn btn-warning'>Stand</button> <button class='new-game-button btn btn-info'>New Game</button> </div> </center> <div class='player-hand-container'></div> <div class='dealer-hand-container'></div>");

    AppView.prototype.events = {
      'click .hit-button': function() {
        return this.model.hit();
      },
      'click .stand-button': function() {
        return this.model.stand();
      },
      'click .new-game-button': function() {
        this.model.newGame();
        return this.render();
      }
    };

    AppView.prototype.initialize = function() {
      return this.render();
    };

    AppView.prototype.render = function() {
      this.$el.children().detach();
      this.$el.html(this.template());
      this.$('.player-hand-container').html(new HandView({
        collection: this.model.get('playerHand')
      }).el);
      return this.$('.dealer-hand-container').html(new HandView({
        collection: this.model.get('dealerHand')
      }).el);
    };

    return AppView;

  })(Backbone.View);

}).call(this);

//# sourceMappingURL=AppView.js.map
